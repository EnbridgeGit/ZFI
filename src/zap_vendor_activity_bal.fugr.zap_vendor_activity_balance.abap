FUNCTION ZAP_VENDOR_ACTIVITY_BALANCE.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(S_LIFNR) TYPE  FAGL_RANGE_T_LIFNR
*"     VALUE(S_BUKRS) TYPE  EBPP_RANGE_T_BUKRS
*"     VALUE(S_ERDAT) TYPE  ACC_T_RA_DATE
*"     VALUE(IM_CPUDT) TYPE  ACC_T_RA_DATE
*"     VALUE(IM_LOEVM) TYPE  LOEVM_X
*"     VALUE(IM_SPERR) TYPE  SPERB_X
*"  EXPORTING
*"     VALUE(INACTIVE_VENDORS) TYPE  NUM6
*"     VALUE(ACTIVE_VENDORS) TYPE  NUM6
*"     VALUE(NEW_VENDORS) TYPE  NUM6
*"  TABLES
*"      OUTPUT_TAB TYPE  ZAP_VEN_ACT_BAL_T
*"----------------------------------------------------------------------

  DATA: LT_VBSEGK   TYPE STANDARD TABLE OF TY_VBSEGK,
        LT_VBKPF    TYPE TY_VBKPF,
        LT_BSIK     TYPE STANDARD TABLE OF TY_BSIK,
        LT_BSAK     TYPE STANDARD TABLE OF TY_BSAK,
        LT_OUTPUT_F TYPE ZAP_VEN_ACT_BAL_T,
        LV_LIFNR    TYPE LIFNR,
        LV_TABIX    TYPE SYTABIX,
        LV_180DAYS_BACK TYPE DATUM.

  FIELD-SYMBOLS: <VBSEGK>   LIKE LINE OF LT_VBSEGK,
                 <BSIK>     LIKE LINE OF LT_BSIK,
                 <BSAK>     LIKE LINE OF LT_BSAK,
                 <LFA1>     LIKE LINE OF GT_LFA1,
                 <OUTPUT_F> LIKE LINE OF LT_OUTPUT_F.

  REFRESH: GT_LFA1, GT_OUTPUT.
  CLEAR: GV_INACTIVE, GV_ACTIVE, GV_NEW.

  SELECT LIFNR NAME1 STRAS ORT01 REGIO LAND1
         ERDAT KTOKK LOEVM SPERR
         INTO TABLE GT_LFA1
         FROM LFA1
         WHERE LIFNR  IN S_LIFNR
         AND   ERDAT  IN S_ERDAT.
  IF SY-SUBRC EQ 0.
    LV_180DAYS_BACK = SY-DATUM - 180.
*    IF im_loevm IS NOT INITIAL OR im_sperr IS NOT INITIAL.
    LOOP AT GT_LFA1 ASSIGNING <LFA1>.
      LV_TABIX = SY-TABIX.
      IF IM_LOEVM IS NOT INITIAL AND IM_SPERR IS NOT INITIAL AND
        <LFA1>-LOEVM EQ IM_LOEVM AND <LFA1>-SPERR EQ IM_SPERR.
        GV_INACTIVE = GV_INACTIVE + 1.
      ELSEIF IM_LOEVM IS NOT INITIAL AND <LFA1>-LOEVM EQ IM_LOEVM.
        GV_INACTIVE = GV_INACTIVE + 1.
      ELSEIF IM_SPERR IS NOT INITIAL AND <LFA1>-SPERR EQ IM_SPERR.
        GV_INACTIVE = GV_INACTIVE + 1.
      ENDIF.

      IF <LFA1>-LOEVM IS INITIAL AND <LFA1>-SPERR IS INITIAL.
        GV_ACTIVE = GV_ACTIVE + 1. "Active Vendors
      ENDIF.

      IF <LFA1>-DATE >= LV_180DAYS_BACK.
        GV_NEW = GV_NEW + 1.
      ENDIF.

    ENDLOOP.
*    ENDIF.
    SORT GT_LFA1.

* Read parked documents
    IF IM_CPUDT[] IS NOT INITIAL.
      SELECT A~AUSBK A~BELNR A~GJAHR A~BZKEY A~LIFNR
             A~SHKZG A~BUKRS A~SWAER A~UMSKZ A~DMBTR
             INTO TABLE LT_VBSEGK
             FROM VBSEGK AS A
             INNER JOIN VBKPF AS B ON ( A~AUSBK EQ B~AUSBK AND A~BELNR EQ B~BELNR AND A~GJAHR EQ B~GJAHR )
             FOR ALL ENTRIES IN GT_LFA1
             WHERE A~LIFNR EQ GT_LFA1-LIFNR
             AND   A~BUKRS IN S_BUKRS
             AND   A~UMSKZ EQ ''
             AND ( A~SHKZG EQ 'H' OR A~SHKZG EQ 'S' )
             AND  B~CPUDT IN IM_CPUDT.
    ELSE.
      SELECT AUSBK BELNR GJAHR BZKEY LIFNR
             SHKZG BUKRS SWAER UMSKZ DMBTR
             INTO TABLE LT_VBSEGK
             FROM   VBSEGK
             FOR ALL ENTRIES IN GT_LFA1
             WHERE LIFNR EQ GT_LFA1-LIFNR
             AND   BUKRS IN S_BUKRS
             AND   UMSKZ EQ ''
             AND ( SHKZG EQ 'H' OR SHKZG EQ 'S' ).
      SORT LT_VBSEGK BY LIFNR.
    ENDIF.

    SELECT BUKRS LIFNR UMSKS UMSKZ AUGDT
           AUGBL ZUONR GJAHR BELNR BUZEI
           ZUMSK DMBTR SHKZG WAERS
           INTO TABLE LT_BSIK
           FROM BSIK
           FOR ALL ENTRIES IN GT_LFA1
           WHERE LIFNR EQ GT_LFA1-LIFNR
           AND   BUKRS IN S_BUKRS
           AND ( SHKZG EQ 'H' OR SHKZG EQ 'S' )
           AND CPUDT IN IM_CPUDT.
    IF SY-SUBRC EQ 0.
      SORT LT_BSIK BY LIFNR.
    ELSE.

    ENDIF.

    SELECT BUKRS LIFNR UMSKS UMSKZ AUGDT AUGBL
           ZUONR GJAHR BELNR BUZEI SHKZG WAERS DMBTR
           INTO TABLE LT_BSAK
           FROM BSAK
           FOR ALL ENTRIES IN GT_LFA1
           WHERE LIFNR EQ GT_LFA1-LIFNR
           AND   BUKRS IN S_BUKRS
           AND ( SHKZG EQ 'H' OR SHKZG EQ 'S' )
           AND  CPUDT IN IM_CPUDT.
    IF SY-SUBRC EQ 0.
      SORT LT_BSAK BY LIFNR.
    ELSE.

    ENDIF.

* Get PO totals, PO Balance quantity and PO balance amount
    PERFORM GET_PO_DETAILS USING IM_CPUDT.

*Sub-total VBSEGK
    CLEAR: LV_LIFNR.
    LOOP AT LT_VBSEGK ASSIGNING <VBSEGK>.
      PERFORM ASSIGN_VALUES USING    <VBSEGK>-DMBTR <VBSEGK>-SHKZG
                                     <VBSEGK>-WAERS
                                     <VBSEGK>-LIFNR LV_LIFNR.
      LV_LIFNR = <VBSEGK>-LIFNR.
    ENDLOOP.

*Sub-total BSIK
    CLEAR: LV_LIFNR.
    LOOP AT LT_BSIK ASSIGNING <BSIK>.
      PERFORM ASSIGN_VALUES USING    <BSIK>-DMBTR
                                     <BSIK>-SHKZG <BSIK>-WAERS
                                     <BSIK>-LIFNR LV_LIFNR.
      LV_LIFNR = <BSIK>-LIFNR.
    ENDLOOP.

*Sub-total BSAK
    CLEAR: LV_LIFNR.
    LOOP AT LT_BSAK ASSIGNING <BSAK>.
      PERFORM ASSIGN_VALUES USING    <BSAK>-DMBTR
                                     <BSAK>-SHKZG <BSAK>-WAERS
                                     <BSAK>-LIFNR LV_LIFNR.
      LV_LIFNR = <BSAK>-LIFNR.
    ENDLOOP.
  ENDIF.

*Merge records by vendor
  CLEAR: LV_LIFNR.
  SORT GT_OUTPUT BY LIFNR.
  LOOP AT GT_OUTPUT ASSIGNING <OUTPUT>.
    IF <OUTPUT>-LIFNR EQ LV_LIFNR. "Same as previous loop pass vendor
      <OUTPUT_F>-CREDIT_TOT  = <OUTPUT_F>-CREDIT_TOT + <OUTPUT>-CREDIT_TOT.
      <OUTPUT_F>-DEBIT_TOT   = <OUTPUT_F>-DEBIT_TOT + <OUTPUT>-DEBIT_TOT.
      <OUTPUT_F>-PO_TOT      = <OUTPUT_F>-PO_TOT  + <OUTPUT>-PO_TOT.
      <OUTPUT_F>-PO_BAL_QTY  = <OUTPUT_F>-PO_BAL_QTY + <OUTPUT>-PO_BAL_QTY.
      <OUTPUT_F>-PO_BAL_AMT  = <OUTPUT_F>-PO_BAL_AMT + <OUTPUT>-PO_BAL_AMT.
    ELSE. "New Vendor
      APPEND INITIAL LINE TO OUTPUT_TAB ASSIGNING <OUTPUT_F>.
      <OUTPUT_F>-LIFNR      = <OUTPUT>-LIFNR.
      <OUTPUT_F>-NAME1      = <OUTPUT>-NAME1.
      <OUTPUT_F>-STRAS      = <OUTPUT>-STRAS.
      <OUTPUT_F>-ORT01      = <OUTPUT>-ORT01.
      <OUTPUT_F>-REGIO      = <OUTPUT>-REGIO.
      <OUTPUT_F>-LAND1      = <OUTPUT>-LAND1.
      <OUTPUT_F>-ZDATE      = <OUTPUT>-DATE.
      <OUTPUT_F>-ZKTOKK     = <OUTPUT>-KTOKK.
      <OUTPUT_F>-CURRENCY   = <OUTPUT>-CURRENCY.
      <OUTPUT_F>-CREDIT_TOT = <OUTPUT>-CREDIT_TOT.
      <OUTPUT_F>-DEBIT_TOT  = <OUTPUT>-DEBIT_TOT.
      <OUTPUT_F>-PO_TOT      = <OUTPUT_F>-PO_TOT  + <OUTPUT>-PO_TOT.
      <OUTPUT_F>-PO_BAL_QTY  = <OUTPUT_F>-PO_BAL_QTY + <OUTPUT>-PO_BAL_QTY.
      <OUTPUT_F>-PO_BAL_AMT  = <OUTPUT_F>-PO_BAL_AMT + <OUTPUT>-PO_BAL_AMT.
    ENDIF.
    LV_LIFNR = <OUTPUT>-LIFNR.
  ENDLOOP.

  INACTIVE_VENDORS = GV_INACTIVE.
  ACTIVE_VENDORS   = GV_ACTIVE.
  NEW_VENDORS      = GV_NEW.

ENDFUNCTION.
